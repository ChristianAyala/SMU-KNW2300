#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Long;

my $CONSOLE_WIDTH = 100;

my $version_number = '0';
my $quiet = 0;
my $save_directory = '';
my $source_dir = '';

GetOptions('savedir=s', \$save_directory,
   	   'sourcedir=s', \$source_dir,
	   'quiet', \$quiet);

if (scalar(@ARGV) == 0)
{
	print "Build tool written by Chris King:\n\n";
	print "Usage: $0 [--quiet] [--savedir directory] [--sourcedir directory] version_number\n";
	print "		version_number		Specify the version number of the API\n";
	print "		--quiet			Hide all output, including errors,  and fail all prompts\n";
	print "		--savedir [dir]		Specify the save location.  Default is the user's Desktop\n";
	print "		--sourcedir [dir]	Specify the source location.  Default is ./\n";
	exit 1;
}

$version_number = $ARGV[0];
$source_dir = '.' if ($source_dir eq '');
$save_directory = $ENV{'HOME'}.'/Desktop' if ($save_directory eq '');

print_box("Building version $version_number of RXTXRobot Project");


my $save_directory_JAR = $save_directory.'/RXTXRobot_v'.$version_number.'_JAR';
my $save_directory_LIB = $save_directory.'/RXTXRobot_v'.$version_number.'_LIB';
print_progress('Checking for existing files');
if (-d $save_directory_JAR or -d $save_directory_LIB or -e $save_directory_JAR.'.zip' or -e $save_directory_LIB.'.zip')
{	
	finish_progress(0,2);
	if (prompt("WARNING: Version $version_number already exists. Overwrite?"))
	{
		execute("rm -rf \"$save_directory_JAR\"");
		execute("rm -rf \"$save_directory_LIB\"");
		execute("rm -f \"$save_directory_JAR.zip\"");
		execute("rm -f \"$save_directory_LIB.zip\"");
	}
	else
	{
		print_box("Failed to continue");
		exit 1;
	}
}
else
{
	finish_progress(1);
}
print_progress('Checking Source Directory');


my @files = qw(/RXTXRobot/build.xml /RXTXRobot/lib /RXTXRobot/store/RXTXRobot.jar /RXTXRobot/dist/javadoc /Examples  /RXTXRobot/lib/RXTXcomm_INSTALL);
foreach my $x (@files)
{
	if (not -e $source_dir.$x)
	{
		finish_progress(0,3);
		print_box("Source directory is not valid\n${source_dir}$x does not exist");
		exit 1;
	}
}

finish_progress(1);
print_progress('Making directories');
execute("mkdir -p \"$save_directory_JAR\"");
execute("mkdir -p \"$save_directory_JAR/jar/\"");
execute("mkdir -p \"$save_directory_LIB\"",1);
print_progress('Moving Javadocs');
execute("cp -r \"$source_dir/RXTXRobot/dist/javadoc\" \"$save_directory_JAR/javadocs\"",1);
print_progress('Moving API JAR');
execute("cp \"$source_dir/RXTXRobot/store/RXTXRobot.jar\" \"$save_directory_JAR/jar/RXTXRobot.jar\"",1);
print_progress('Moving Examples');
execute("cp -r \"$source_dir/Examples\" \"$save_directory_JAR/examples\"",1);
print_progress('Zipping up API');
execute("cd \"$save_directory_JAR\"; zip -r -9 -q \"$save_directory_JAR.zip\" -xi \"./\"",1);
print_progress('Moving main readme');
execute("cp \"$source_dir/RXTXRobot/lib/README.txt\" \"$save_directory_LIB/README.txt\"",1);
print_progress('Moving RXTXcomm_INSTALL');
execute("cp -r \"$source_dir/RXTXRobot/lib/RXTXcomm_INSTALL\" \"$save_directory_LIB/RXTXcomm_INSTALL\"",1);
print_progress('Zipping up Library');
execute("cd \"$save_directory_LIB\"; zip -r -9 -q \"$save_directory_LIB.zip\" -xi \"./\"",1);
print_progress('Cleaning up');
execute("rm -rf \"$save_directory_LIB\"");
execute("rm -rf \"$save_directory_JAR\"",1);

print_box("RXTXRobot API version $version_number built successfully\n\nJar Location:         $save_directory_JAR.zip\nLibrary Location:     $save_directory_LIB.zip",3);
exit 0;



sub print_box
{
	return if ($quiet);
	my $text = shift;
	my $topLines = shift || 1;
	my @lines = split("\n", $text);
	my $maxlength = 0;
	foreach (@lines)
	{
		$maxlength = length($_) if ($maxlength < length($_));
	}
	print "\n" for (1 .. $topLines);
	print "-"x($maxlength+6);
	print "\n";
	foreach (@lines)
	{
		print "|  $_".(' 'x($maxlength-length($_)))."  |\n";
	}
	print "-"x($maxlength+6);
	print "\n\n";
}

sub print_progress
{
	return if ($quiet);
	my $text = shift;
	print $text.('.'x($CONSOLE_WIDTH-length($text)));
}

sub finish_progress
{
	return if ($quiet);
	my $num = shift;
	my $newlines = shift || 1;
	print "fail" if ($num == 0);
	print "done" if ($num == 1);
	print "\n" for(1 .. $newlines);
}

sub prompt
{
	return 0 if ($quiet);
	my $text = shift;
	my $input = 'a';
	do
	{
		print $text.' [Y/n] ';
		$input = <STDIN>;
		chomp($input);
		$input = 'y' unless ($input);
	}
	while (lc($input) ne 'y' and lc($input) ne 'n');
	return 1 if (lc($input) eq 'y');
	return 0;
}

sub execute
{
	my $cmd = shift;
	my $show_success = shift || 0;
	my $response = `$cmd 2>&1`;
	if ($? != 0)
	{
		chomp($response);
		$response =~ s/\t/    /g;
		$response =~ s/\n/ - /g;
		$response =~ tr/\x20-\x7f//cd;
		finish_progress(0,2);
		print_box("Error: \n\n$response");
		exit 1;
	}
	else
	{
		finish_progress(1) if ($show_success);
	}
}


