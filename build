#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Long;
use File::Basename;

my $CONSOLE_WIDTH = 100;

my $version_number = '0';
my $quiet = 0;
my $save_directory = '';
my $source_dir = '';

GetOptions('savedir=s', \$save_directory,
   	   'sourcedir=s', \$source_dir,
	   'quiet', \$quiet);

if ($version_number eq '0' and scalar(@ARGV) == 0)
{
	print "Build tool written by Chris King:\n\n";
	print "Usage: $0 [--quiet] [--savedir directory] [--sourcedir directory] version_number\n";
	print "		version_number		Specify the version number of the API\n";
	print "		--quiet			Hide all output, including errors,  and fail all prompts\n";
	print "		--savedir [dir]		Specify the save location.  Default is the user's Desktop\n";
	print "		--sourcedir [dir]	Specify the source location.  Default is ./\n";
	exit 1;
}

$version_number = $ARGV[0] if ($version_number eq '0');
$source_dir = './' if ($source_dir eq '');


print_box("Building version $version_number of RXTXRobot Project");

$save_directory = $ENV{'HOME'}.'/Desktop/RXTXRobot_v'.$version_number if ($save_directory eq '');

my $save_directory_JAR = $save_directory.'_JAR';
my $save_directory_LIB = $save_directory.'_LIB';
print_progress('Checking for existing files');
if (-d $save_directory_JAR or -d $save_directory_LIB or -e $save_directory.'.zip')
{	
	finish_progress(0,2);
	if (prompt("WARNING: Version $version_number already exists. Overwrite?"))
	{
		`rm -rf $save_directory_JAR`;
		`rm -rf $save_directory_LIB`;
		`rm -f $save_directory.zip`;
		`rm -f ${save_directory}_LIB.zip`;
	}
	else
	{
		print_box("Failed to continue");
		exit 1;
	}
}
else
{
	finish_progress(1);
}
print_progress('Checking Source Directory');

if (not -d $source_dir or not -e $source_dir.'/RXTXRobot/build.xml' or not -d $source_dir.'/RXTXRobot/lib' or not -e $source_dir.'/RXTXRobot/store/RXTXRobot.jar' or not -d $source_dir.'/RXTXRobot/dist/javadoc' or not -d $source_dir.'/Examples')
{
	finish_progress(0,3);
	print_box('Source directory is not valid');
	exit 1;
}
finish_progress(1);
print_progress('Making directories');
`mkdir "$save_directory_JAR"`;
`mkdir "$save_directory_JAR/jar/"`;
`mkdir "$save_directory_LIB"`;
finish_progress(1);
print_progress('Moving Javadocs');
`cp -r "$source_dir/RXTXRobot/dist/javadoc" "$save_directory_JAR/javadocs"`;
finish_progress(1);
print_progress('Moving API JAR');
`cp "$source_dir/RXTXRobot/store/RXTXRobot.jar" "$save_directory_JAR/jar/RXTXRobot.jar"`;
finish_progress(1);
print_progress('Moving Examples');
`cp -r "$source_dir/Examples" "$save_directory_JAR/examples"`;
finish_progress(1);
print_progress('Zipping up API');
my $temp_location = basename($save_directory_JAR);
my $cd_loc = dirname($save_directory_JAR);
`cd $cd_loc; zip -r -9 -q "$save_directory.zip" -xi "$temp_location"`;
finish_progress(1);
print_progress('Moving main readme');
`cp "$source_dir/RXTXRobot/lib/README.txt" "$save_directory_LIB/README.txt"`;
finish_progress(1);
print_progress('Moving RXTXcomm_INSTALL');
`cp -r "$source_dir/RXTXRobot/lib/RXTXcomm_INSTALL" "$save_directory_LIB/RXTXcomm_INSTALL"`;
finish_progress(1);
print_progress('Zipping up Library');
$temp_location = basename($save_directory_LIB);
$cd_loc = dirname($save_directory_JAR);
`cd $cd_loc; zip -r -9 -q "$save_directory_LIB.zip" -xi "$temp_location"`;
finish_progress(1);
print_progress('Cleaning up');
`rm -rf $save_directory_LIB`;
`rm -rf $save_directory_JAR`;
finish_progress(1,3);

print_box("RXTXRobot API version $version_number built successfully");
exit 0;



sub print_box
{
	my $text = shift;
	print "-"x(length($text)+6);
	print "\n|  $text  |\n";
	print "-"x(length($text)+6);
	print "\n\n";
}

sub print_progress
{
	my $text = shift;
	print $text.('.'x($CONSOLE_WIDTH-length($text)));
}

sub finish_progress
{
	my $num = shift;
	my $newlines = shift || 1;
	print "fail" if ($num == 0);
	print "done" if ($num == 1);
	print "\n" for(1 .. $newlines);
}

sub prompt
{
	my $text = shift;
	my $input = 'a';
	do
	{
		print $text.' [Y/n] ';
		$input = <STDIN>;
		chomp($input);
		$input = 'y' unless ($input);
	}
	while (lc($input) ne 'y' and lc($input) ne 'n');
	return 1 if (lc($input) eq 'y');
	return 0;
}

